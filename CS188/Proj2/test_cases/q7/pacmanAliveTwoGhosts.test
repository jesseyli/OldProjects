class: "LogicStatementTest"
success: "PASS"
failure: "NO PASS"

# Human-readable representation of the configuration being tested:
# %%%
# %G%
# %P%
# %G%
# %%%

pairs: "model_val_pairs"

# Python statements initializing variables for the test below.
preamble: """
import logic
import itertools
import layout

board = '%%%\n% %\n%P%\n% %\n%%%'

lay = layout.Layout([row.strip() for row in board.strip().split('\n')])
walls_grid = lay.walls
_, (x, y) = lay.agentPositions[0]
t = 1
num_ghosts = 2

ghost_str0 = logicPlan.ghost_pos_str+'0'
ghost_str1 = logicPlan.ghost_pos_str+'1'

axioms = logicPlan.pacmanAliveSuccessorStateAxioms(x, y, t, num_ghosts)

symbols = [ logic.PropSymbolExpr(logicPlan.pacman_alive_str, t)
          , logic.PropSymbolExpr(logicPlan.pacman_alive_str, t-1)
          , logic.PropSymbolExpr(logicPlan.pacman_str, x, y, t)
          , logic.PropSymbolExpr(ghost_str0, x, y, t)
          , logic.PropSymbolExpr(ghost_str0, x, y, t-1)
          , logic.PropSymbolExpr(ghost_str1, x, y, t)
          , logic.PropSymbolExpr(ghost_str1, x, y, t-1)
          ]

assignments = itertools.product([True, False], repeat=len(symbols))
models = [ { sym : ass for sym, ass in zip(symbols, assignment) } 
        for assignment in assignments ]

truth_vals = [ logic.pl_true(axioms, model) for model in models ]
model_val_pairs = list(zip(models, truth_vals))
"""

# A python expression to be evaluated.  This expression must return the 
# same result for the student and instructor's code.

test: "truth_vals"


