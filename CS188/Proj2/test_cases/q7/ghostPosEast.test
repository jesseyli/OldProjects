class: "LogicStatementTest"
success: "PASS"
failure: "NO PASS"

# Human-readable representation of the configuration being tested:
# %%%%
# %  %
# %G %
# %%%%

pairs: "model_val_pairs"

# Python statements initializing variables for the test below.
preamble: """
import logic
import itertools
import layout

board = '%%%%\n%  %\n%G %\n%%%%'

lay = layout.Layout([row.strip() for row in board.strip().split('\n')])
walls_grid = lay.walls
_, (x, y) = lay.agentPositions[0]
t = 1
ghost_num = 0

pos_str = logicPlan.ghost_pos_str+str(ghost_num)
east_str = logicPlan.ghost_east_str+str(ghost_num)

axioms = logicPlan.ghostPositionSuccessorStateAxioms(
          x, y, t, ghost_num, walls_grid)

symbols = [ logic.PropSymbolExpr(pos_str, x, y, t)
          , logic.PropSymbolExpr(pos_str, x, y, t-1)
          , logic.PropSymbolExpr(pos_str, x+1, y, t-1)
          , logic.PropSymbolExpr(pos_str, x-1, y, t-1)
          , logic.PropSymbolExpr(east_str, t-1)
          ]

assignments = itertools.product([True, False], repeat=len(symbols))
models = [ { sym : ass for sym, ass in zip(symbols, assignment) } 
        for assignment in assignments ]

truth_vals = [ logic.pl_true(axioms, model) for model in models ]
model_val_pairs = list(zip(models, truth_vals))
"""

# A python expression to be evaluated.  This expression must return the 
# same result for the student and instructor's code.

test: "truth_vals"


